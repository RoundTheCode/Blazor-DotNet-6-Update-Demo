@using RoundTheCode.BlazorDotNet6.Wasm.Models
@using System.Diagnostics 
@implements IDisposable
@inject ComponentApplicationState ApplicationState
@page "/"
<PageTitle>Viewing @((Notes?.Any() ?? false) ? Notes.Count() : 0) notes</PageTitle>
@if(!string.IsNullOrWhiteSpace(CustomMessage))
{
    <p>My Custom Message: @CustomMessage</p>
}
    <div class="col-6">
        <h2>Enter your note</h2>
        <fieldset>
            <label for="Comment">
                <textarea id="Comment" cols="50" rows="6" @bind="NewComment" @bind:event="onchange"></textarea>
            </label>
        </fieldset>
        <button type="submit" @onclick="@OnSubmitNote">Submit</button>
    </div>
    <div class="col-6">
        <h2>Your saved notes</h2>
        @if (Notes?.Any() ?? false)
        {
            <ul>
                @foreach (var note in Notes)
                {
                    <NoteViewComponent Note="@note" OnDeleteNote="@((e) => OnDeleteNote(e, note))"></NoteViewComponent>
                }
            </ul>
    }
        else
        {
            if (Loading)
            {
                <p>Loading...</p>
            }
            else
            {
                <p>You currently do not have any saved notes.</p>
            }
        }
    </div>
    @code {

        public IList<Note> Notes { get; set; }

        public string NewComment { get; set; }

        [Parameter]
        [SupplyParameterFromQuery(Name = "Message")]
        public string CustomMessage { get; set; }

        public bool Loading { get; set; }

        protected override async Task OnInitializedAsync()
        {
            ApplicationState.OnPersisting += StoreNotes;

            if (ApplicationState.TryTakeAsJson<Note[]>("Notes", out var storedNotes))
            {
                Notes = storedNotes.ToList();
            }
            else
            {
                Notes = new List<Note>();
                Notes.Add(new Note("Hello there", DateTime.UtcNow));
                Notes.Add(new Note("How are you doing?", DateTime.UtcNow));
            }

            await base.OnInitializedAsync();
        }

        protected void OnSubmitNote(MouseEventArgs mouseEventArgs)
        {
            Notes.Add(new Note(NewComment, DateTime.UtcNow));
            NewComment = string.Empty;
        }


        protected void OnDeleteNote(MouseEventArgs mouseEventArgs, Note note)
        {
            if (Notes?.Any(n => n == note) ?? false)
            {
                Notes.Remove(Notes.First(n => n == note));
            }
        }

        private Task StoreNotes()
        {
            ApplicationState.PersistAsJson("Notes", Notes);
            return Task.CompletedTask;
        }

        void IDisposable.Dispose()
        {
            ApplicationState.OnPersisting -= StoreNotes;
        }

    }